{"mappings":"AAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,AAAC;AACpD,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAmB,OAAO,CAAC;AACnE,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAmB,OAAO,CAAC;AAEnE,OAAO,CAAC,OAAO,CAAC,CAAA,MAAM,GAAI;IACtB,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAM;QACpC,IAAI;YACH,MAAK,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC;YAC9E,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,WAAW,GAAG,UAAU,CACtD,MAAM,EACN,MAAM,EACN,MAAM,CAAC,WAAW,CACrB,CAAC,QAAQ,EAAE,CAAC;SACb,CACD,OAAM,KAAK,EAAE;YACZ,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACpB;KACH,CAAC,CAAC;CACN,CAAC,CAAC;AAEH,SAAS,oBAAoB,CAAC,GAAG,MAAM,AAAU,EAAY;IACzD,MAAM,OAAO,GAAa,EAAE;IAC5B,MAAM,CAAC,OAAO,CAAC,CAAA,KAAK,GAAI;QACpB,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,AAAC;QACtC,IAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,EACxB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAA;QAEjE,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC;KAC5B,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;CAClB;AAED,SAAS,UAAU,CAAC,MAAc,EAAE,MAAc,EAAE,QAAgB,EAAE;IAClE,OAAO,QAAQ;QAEf,KAAK,GAAG;YACJ,OAAO,MAAM,GAAG,MAAM,CAAA;QAC1B,KAAK,GAAG;YACJ,OAAO,MAAM,GAAG,MAAM,CAAA;QAC1B,KAAK,GAAG;YACJ,OAAO,MAAM,GAAG,MAAM,CAAA;QAC1B,KAAK,GAAG;YACJ,OAAO,MAAM,GAAG,MAAM,CAAA;KAEzB;IACD,MAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,QAAQ,CAAC,CAAA;CACxD","sources":["app.ts"],"sourcesContent":["const buttons = document.querySelectorAll(\"button\");\r\nconst numInput1 = document.querySelector<HTMLInputElement>(\"#num1\")\r\nconst numInput2 = document.querySelector<HTMLInputElement>(\"#num2\")\r\n\r\nbuttons.forEach(button => {\r\n    button.addEventListener(\"click\", () => {\r\n       try {\r\n        const[value1, value2] = tryParseInputToFloat(numInput1.value, numInput2.value)\r\n        document.querySelector('#result').textContent = tryCompute(\r\n            value1,\r\n            value2,\r\n            button.textContent\r\n        ).toString();\r\n       }\r\n       catch(error) {\r\n        alert(error.message)\r\n       }\r\n    });\r\n}); \r\n\r\nfunction tryParseInputToFloat(...values: string[]): number[] {\r\n    const numbers: number[] = []\r\n    values.forEach(value => {\r\n        const parsedValue = parseFloat(value);\r\n        if(Number.isNaN(parsedValue)) {\r\n            throw new Error('Invalid input value, valid number required')\r\n        }\r\n        numbers.push(parsedValue)\r\n    });\r\n    return numbers;\r\n}\r\n\r\nfunction tryCompute(value1: number, value2: number, operator: string) {\r\n    switch(operator) {\r\n\r\n    case '+':\r\n        return value1 + value2\r\n    case '-':\r\n        return value1 - value2\r\n    case '*':\r\n        return value1 * value2\r\n    case '/':\r\n        return value1 / value2\r\n\r\n    }\r\n    throw new Error('Unimplemented operator:' + operator)\r\n}"],"names":[],"version":3,"file":"index.6b86260e.js.map","sourceRoot":"/__parcel_source_root/"}